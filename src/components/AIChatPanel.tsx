import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Sparkles, X, RefreshCw, Copy } from 'lucide-react';

const AI_MODELS = [
  { id: 'gpt-4', name: 'GPT-4', provider: 'OpenAI', color: 'from-green-500 to-emerald-500' },
  { id: 'gpt-4-turbo', name: 'GPT-4 Turbo', provider: 'OpenAI', color: 'from-green-500 to-teal-500' },
  { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', provider: 'OpenAI', color: 'from-blue-500 to-cyan-500' },
  { id: 'claude-3-opus', name: 'Claude 3 Opus', provider: 'Anthropic', color: 'from-orange-500 to-red-500' },
  { id: 'claude-3-sonnet', name: 'Claude 3 Sonnet', provider: 'Anthropic', color: 'from-orange-500 to-amber-500' },
  { id: 'claude-3-haiku', name: 'Claude 3 Haiku', provider: 'Anthropic', color: 'from-yellow-500 to-orange-500' },
  { id: 'gemini-pro', name: 'Gemini Pro', provider: 'Google', color: 'from-blue-500 to-purple-500' },
  { id: 'gemini-ultra', name: 'Gemini Ultra', provider: 'Google', color: 'from-purple-500 to-pink-500' },
  { id: 'glm-4', name: 'GLM-4', provider: 'Zhipu AI', color: 'from-indigo-500 to-blue-500' },
  { id: 'glm-4-plus', name: 'GLM-4 Plus', provider: 'Zhipu AI', color: 'from-indigo-500 to-purple-500' },
  { id: 'mixtral-8x7b', name: 'Mixtral 8x7B', provider: 'Mistral', color: 'from-red-500 to-orange-500' },
  { id: 'llama-3', name: 'Llama 3 70B', provider: 'Meta', color: 'from-blue-500 to-indigo-500' },
];

const TONES = ['Professional', 'Friendly', 'Casual', 'Educational'];

interface AIChatPanelProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function AIChatPanel({ isOpen, onClose }: AIChatPanelProps) {
  const [selectedModel, setSelectedModel] = useState(AI_MODELS[0]);
  const [selectedTone, setSelectedTone] = useState(TONES[0]);
  const [inputText, setInputText] = useState('');
  const [videoContext, setVideoContext] = useState('');
  const [aiResponse, setAiResponse] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerate = async () => {
    if (!inputText.trim()) return;

    setIsGenerating(true);
    setTimeout(() => {
      setAiResponse(
        `This is a ${selectedTone.toLowerCase()} response generated by ${selectedModel.name}. I understand your comment about "${inputText.slice(0, 50)}..." and here's my thoughtful reply that addresses your question while maintaining the tone you requested.`
      );
      setIsGenerating(false);
    }, 2000);
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(aiResponse);
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-40"
            onClick={onClose}
          />
          <motion.div
            initial={{ x: '100%' }}
            animate={{ x: 0 }}
            exit={{ x: '100%' }}
            transition={{ type: 'spring', damping: 25, stiffness: 200 }}
            className="fixed right-0 top-0 h-full w-full md:w-[500px] bg-gray-900 border-l border-white/10 z-50 overflow-y-auto"
          >
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-red-500 to-orange-500 rounded-lg flex items-center justify-center">
                    <Sparkles className="w-5 h-5 text-white" />
                  </div>
                  <div>
                    <h2 className="text-xl font-bold text-white">AI Reply Lab</h2>
                    <p className="text-xs text-gray-400">Test and refine your responses</p>
                  </div>
                </div>
                <button
                  onClick={onClose}
                  className="w-9 h-9 bg-white/5 hover:bg-white/10 rounded-lg flex items-center justify-center transition"
                >
                  <X className="w-5 h-5 text-gray-400" />
                </button>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Select AI Model
                  </label>
                  <select
                    value={selectedModel.id}
                    onChange={(e) => setSelectedModel(AI_MODELS.find(m => m.id === e.target.value) || AI_MODELS[0])}
                    className="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white focus:outline-none focus:border-white/30 transition"
                  >
                    {AI_MODELS.map((model) => (
                      <option key={model.id} value={model.id} className="bg-gray-800">
                        {model.name} ({model.provider})
                      </option>
                    ))}
                  </select>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {AI_MODELS.slice(0, 6).map((model) => (
                      <button
                        key={model.id}
                        onClick={() => setSelectedModel(model)}
                        className={`px-3 py-1.5 rounded-lg text-xs font-medium transition ${
                          selectedModel.id === model.id
                            ? `bg-gradient-to-r ${model.color} text-white`
                            : 'bg-white/5 text-gray-400 hover:bg-white/10'
                        }`}
                      >
                        {model.name}
                      </button>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Response Tone
                  </label>
                  <div className="grid grid-cols-2 gap-2">
                    {TONES.map((tone) => (
                      <button
                        key={tone}
                        onClick={() => setSelectedTone(tone)}
                        className={`px-4 py-2.5 rounded-lg text-sm font-medium transition ${
                          selectedTone === tone
                            ? 'bg-gradient-to-r from-red-500 to-orange-500 text-white'
                            : 'bg-white/5 text-gray-400 hover:bg-white/10'
                        }`}
                      >
                        {tone}
                      </button>
                    ))}
                  </div>
                </div>

                <div>
                  <label htmlFor="videoContext" className="block text-sm font-medium text-gray-300 mb-2">
                    Video Context (Optional)
                  </label>
                  <input
                    id="videoContext"
                    type="text"
                    value={videoContext}
                    onChange={(e) => setVideoContext(e.target.value)}
                    placeholder="e.g., Photography Setup Tour"
                    className="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-white/30 transition"
                  />
                </div>

                <div>
                  <label htmlFor="comment" className="block text-sm font-medium text-gray-300 mb-2">
                    Comment to Reply To
                  </label>
                  <textarea
                    id="comment"
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                    placeholder="Paste the YouTube comment here..."
                    rows={4}
                    className="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-white/30 transition resize-none"
                  />
                </div>

                <button
                  onClick={handleGenerate}
                  disabled={!inputText.trim() || isGenerating}
                  className="w-full py-3 bg-gradient-to-r from-red-500 to-orange-500 rounded-xl font-semibold text-white hover:shadow-lg hover:shadow-red-500/50 transition disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                >
                  {isGenerating ? (
                    <>
                      <RefreshCw className="w-5 h-5 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Send className="w-5 h-5" />
                      Generate Reply
                    </>
                  )}
                </button>

                {aiResponse && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="bg-white/5 border border-white/10 rounded-xl p-4"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <div className={`w-2 h-2 rounded-full bg-gradient-to-r ${selectedModel.color}`} />
                        <span className="text-sm font-medium text-gray-300">{selectedModel.name} Response</span>
                      </div>
                      <button
                        onClick={handleCopy}
                        className="p-2 hover:bg-white/5 rounded-lg transition"
                        title="Copy to clipboard"
                      >
                        <Copy className="w-4 h-4 text-gray-400" />
                      </button>
                    </div>
                    <p className="text-gray-200 leading-relaxed">{aiResponse}</p>
                    <div className="mt-4 flex gap-2">
                      <button className="flex-1 py-2 bg-green-500 rounded-lg text-sm font-medium hover:bg-green-600 transition">
                        Post to YouTube
                      </button>
                      <button
                        onClick={handleGenerate}
                        className="px-4 py-2 bg-white/5 border border-white/10 rounded-lg hover:bg-white/10 transition"
                        title="Regenerate"
                      >
                        <RefreshCw className="w-4 h-4" />
                      </button>
                    </div>
                  </motion.div>
                )}
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
}